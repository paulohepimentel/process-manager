import os
from copy import deepcopy
from cpu import CPU
from memoria import Memoria
from processoImpressao import ProcessoImpressao
from processoSimulado import ProcessoSimulado
from tabelaProcessos import TabelaProcessos
from variavelProcesso import VariavelProcesso
import time


class ProcessoGerenciador:

    def __init__(self):
        print('\n\t\t\tüîµüîµüîµ Iniciando o Processo Gerenciador! üîµüîµüîµ\n')
        self.idProcesso = 0
        self.tempo = 0
        self.tempoCPU = 0
        self.estadoExec = 0
        self.CPU = CPU()
        self.estadoPronto = []
        self.estadoBloqueado = []
        self.tabelaProcesso = TabelaProcessos()

        self.memoriaPrimaria = Memoria(10)
        self.memoriaSecundaria = Memoria(0)
        self.memoriaVirtual = Memoria(0)

        #Fragmenta√ß√£o externa √© quando um espa√ßo de mem√≥ria que possui espa√ßo para alocar um processo √© 
        # ignorado, e um outro √© utilizado deixando um espa√ßo vago entre os processos na memoria
        #    [x,x,w,0,z,z,a,a]


        self.tempoAlocNos = 0
        self.numAlocNos = 0
        self.alocFeitas = 0
        self.alocNegadas = 0

        # Defini√ß√£o da op√ß√£o de escalonamento
        print('Como voc√™ gostaria que os processos fossem escalonados?')
        print('‚û°Ô∏è  H - Escalonar por prioridade mais alta')
        print('‚û°Ô∏è  X - Escalonar por n√∫mero de instru√ß√µes')
        self.modoDeEscalonamento = 'H'
        '''
        while(True):
            self.modoDeEscalonamento = input('üìå  Escolha uma op√ß√£o: ').upper()
            if self.modoDeEscalonamento == 'H' or self.modoDeEscalonamento == 'X':
                break
            else:
                print('‚ùå Erro! Entrada inv√°lida\n')
        print('\n')
        '''

        # Defini√ß√£o da op√ß√£o de impress√£o
        print('Como voc√™ gostaria de imprimir o estado do sistema?')
        print('‚û°Ô∏è  D - Impress√£o detalhada')
        print('‚û°Ô∏è  S - Impress√£o simplificada')
        self.modoDeImpressao = 'D'
        '''
        while(True):
            self.modoDeImpressao = input('üìå  Escolha uma op√ß√£o: ').upper()
            if self.modoDeImpressao == 'D' or self.modoDeImpressao == 'S':
                break
            else:
                print('‚ùå Erro! Entrada inv√°lida\n')
        print('\n')
        '''

        self.criarProcessoSimulado(
            eProcessoInicial = True
        )
        print('üîµGerenciadorüîµ criou um üü°Simuladoüü°')


    # * M√©todo relacionado aos comandos recebidos do processo controle atrav√©s do pipe
    def recebeComandoDoControle(self, comandoRecebido):
        # Comando U: Fim de uma unidade de tempo. O tempo passa quando o U √© recebido.
        if(comandoRecebido == 'U'):
            self.executarProcessoSimulado()
            self.tempo+=1
            print('\n‚è∞ O tempo foi incrementado. Tempo Atual: ' + str(self.tempo))
            print('\n'+('-'*90)+'\n')

        # Comando L: Desbloqueia o primeiro processo simulado na fila bloqueada.
        elif(comandoRecebido == 'L'): 
            self.processoBloqueadoParaPronto()
            print('üîµGerenciadorüîµ desbloqueou o primeiro processo da fila de bloqueados\n')

        # Comando I: Imprime o estado atual do sistema.
        elif(comandoRecebido == 'I'):
            print('üîµGerenciadorüîµ ir√° criar o üü¢Impress√£oüü¢\n')

            # Pipe -> r para leitura e w para escrita
            rpipe, wpipe = os.pipe()
            idProcesso = os.fork()

            # Processo pai: Processo Gerenciador
            if idProcesso != 0:
                os.write(wpipe, self.modoDeImpressao.encode())
                os.wait() # Espera pelo processo filho

            # Processo filho: Processo Impress√£o
            if idProcesso == 0:
                self.modoDeImpressao = os.read(rpipe, 32)
                self.modoDeImpressao = self.modoDeImpressao.decode()

                '''
                    - n√∫mero m√©dio de fragmentos externos;
                    - tempo m√©dio de aloca√ß√£o em termos de n√∫mero m√©dio de n√≥s percorridos na aloca√ß√£o;
                    - o percentual de vezes que uma requisi√ß√£o de aloca√ß√£o √© negada. Neste caso o processo
                    ficaria bloqueado com uma flag de espera por mem√≥ria. Quando houvesse a libera√ß√£o de
                    mem√≥ria por um processo, a aloca√ß√£o deste processo poderia ser tentada novamente.
                '''

                processoImpressao = ProcessoImpressao()

                if(self.modoDeImpressao == 'D'):
                    processoImpressao.impressaoDetalhada(self.tabelaProcesso)
                elif(self.modoDeImpressao == 'S'):
                    processoImpressao.impressaoSimplificada(self.tabelaProcesso)
                
                print('\nüìë Mem√≥ria Prim√°ria\n')
                self.memoriaPrimaria.imprimeMemoria()

                print("\nüìë Mem√≥ria Secund√°ria:\n")
                self.memoriaSecundaria.imprimeMemoria()

                print("\nüìë Mem√≥ria Virtual:\n")
<<<<<<< HEAD
                self.memoriaPrimaria.imprimeMemoriaVirtual()
=======
                self.memoriaVirtual.imprimeMemoria()
>>>>>>> 1fd86f98411f2aca63da3404f037c00d5fc6065c
                
                print("\nüìë Par√¢metros de Desempenho:\n")
                self.imprimeResultadosMemoria()

                print('\n\t\t\tüü¢üü¢üü¢ Finalizando o Processo Impress√£o! üü¢üü¢üü¢\n')
                exit()

        # Comando M: Imprime o tempo m√©dio do ciclo e finaliza o sistema.
        elif(comandoRecebido == 'M'):
            # tempo m√©dio = (soma do tempo de cpu de todos os processos n√£o finalizados) / (todos os processos)
            tempoMedio = float(self.tempoCPU/self.idProcesso)
            print('‚è∞ Tempo de CPU: %.4f' % (self.tempoCPU))
            print('‚è∞ Numero total de processos: %d' % (self.idProcesso))
            print('‚è∞ Tempo M√©dio do Ciclo: %.4f' % (tempoMedio))
            print('\nüëã Encerrando Sistema!')
            print('\n\t\t\tüîµüîµüîµ Finalizando o Processo Gerenciador! üîµüîµüîµ\n')
            exit()


    # * Fun√ß√µes do Processo Gerenciador:
    # * Fun√ß√£o 1: Criar um novo processo simulado
    def criarProcessoSimulado(self, eProcessoInicial, contadorAtual=0):
        if eProcessoInicial:
            self.processoSimulado = ProcessoSimulado(
                idProcesso = self.idProcesso, 
                contadorPrograma = 0,
                tempoInicio = 0
            )
            arquivo = open('init.txt', 'r') # Processo simulado inicial
            for instrucao in arquivo:
                self.processoSimulado.adicionarInstrucao(instrucao.replace("\n",""))
            arquivo.close()
            self.tabelaProcesso.adicionarProcesso(self.processoSimulado)
            self.inserirNaListaDeProntos(self.processoSimulado)

        else:
            processoSimulado = ProcessoSimulado(
                idProcesso = self.idProcesso, 
                contadorPrograma = contadorAtual,
                tempoInicio = self.tempo, 
                idPai = self.processoSimulado.idProcesso, 
                estado = 1, # Pronto
                prioridade = self.processoSimulado.prioridade
            )
            variaveisPai = deepcopy(self.memoriaPrimaria.buscarVariavelDoProcesso(processoSimulado.idProcessoPai))

            for i in variaveisPai:
                self.alocFeitas+=1
                i.idProcesso = processoSimulado.idProcesso
            
            inicio = time.time()
            resultadoInsercao = self.memoriaPrimaria.algoritmoWorstFit(variaveisPai)
            fim = time.time()
            self.tempoAlocNos+= (fim - inicio)
            self.numAlocNos+=1

            if not resultadoInsercao:
                #self.alocNegadas+= len(variaveisPai)
                self.memoriaPrimaria.inserirSecundariaVect(variaveisPai)
           
            #processoSimulado.variaveis = self.processoSimulado.variaveis.copy()
            processoSimulado.instrucoes = self.processoSimulado.instrucoes.copy()
            self.tabelaProcesso.adicionarProcesso(processoSimulado)
            self.inserirNaListaDeProntos(processoSimulado)

        self.idProcesso += 1

    # * Fun√ß√£o 2: Substituir a imagem atual de um processo simualdo por uma nova imagem
    def substituirImagemProcessoAtual(self, arquivo, processoSimulado):
        processoSimulado.contadorPrograma = 0
        processoSimulado.instrucoes = []
        #processoSimulado.variaveis = {}
        
        with open(arquivo) as file:
            for line in file:
                processoSimulado.adicionarInstrucao(line.replace("\n",""))

    # * Fun√ß√£o 3: Gerenciar a transi√ß√£o de estados do processo
    def inserirNaListaDeProntos(self, processoSimulado):
        processoSimulado.estado = 1
        if processoSimulado.idProcesso in self.estadoPronto:
            self.estadoPronto.append(processoSimulado.idProcesso)

    def processoBloqueadoParaPronto(self):
        if len(self.estadoBloqueado) > 0:
            idProcesso = self.estadoBloqueado.pop(0)
            self.estadoPronto.append(idProcesso)
            self.tabelaProcesso.atualizarEstadoProcessoPorIndice(
                idProcesso = idProcesso,
                estado = 1 # Pronto
            )

    def processoProntoParaBloqueado(self, processoSimulado):
        if len(self.estadoPronto) > 0:
            self.estadoBloqueado.insert(self.estadoPronto.pop(0))
            processoSimulado.estado = 0
    

    # * Fun√ß√£o 4: Escalonar os processos
    def escalonadorDeProcessos(self):
        if(self.modoDeEscalonamento == 'H'):
            self.estadoPronto = self.tabelaProcesso.ordenarProcessosProntos()
        elif(self.modoDeEscalonamento == 'X'):
            self.estadoPronto = self.tabelaProcesso.ordenarNumeroInstrucoes()

        if self.estadoPronto == []:
            self.processoSimulado = None
        else:
            print('‚ú¥Ô∏è  Proximo processo: %d' % self.estadoPronto[0])
            self.processoSimulado = self.tabelaProcesso.buscarProcesso(self.estadoPronto[0])
            self.CPU.quantumUsado = 0
            self.trocaDeContexto(self.processoSimulado)

    # * Fun√ß√£o 5: Realizar a troca de contexto
    def trocaDeContexto(self, processoSimulado):
        self.tabelaProcesso.defineProcessoEmExecucao(processoSimulado)

    # * M√©todo relacionado a execu√ß√£o do processo simulado
    def executarProcessoSimulado(self):
        if self.processoSimulado == None and len(self.estadoPronto) > 0:
            self.escalonadorDeProcessos()
        
        if self.processoSimulado != None:
            self.CPU.executarProcesso(self.processoSimulado)
            self.processoSimulado = self.CPU.processoEmExecucao
            print('\nüü° Executando o processo de ID: ' + str(self.processoSimulado.idProcesso))
            if self.processoSimulado.instrucoes != []:
                self.processoSimulado.estado = 2 # Em execu√ß√£o
                print('üìë Instru√ß√µes do processo atual: ', end='')
                for i in self.processoSimulado.instrucoes:
                    print (i, end='; ')
                #print ('\n')
                instrucao = self.processoSimulado.instrucoes.pop(0)
                instrucaoDividida = instrucao.split()
                comando = instrucaoDividida[0]

                print('\n\nExecutando a instru√ß√£o: ' + comando)

                # ‚Äã1. Comando N: n√∫mero de vari√°veis que ser√£o declaradas neste processo simulado
                if comando == 'N':
                    numDeVariveis = int(instrucaoDividida[1])
                    self.alocFeitas+= numDeVariveis
                    variaveisDoProcesso = []
                    for i in range(numDeVariveis):
                        variavel = VariavelProcesso(self.processoSimulado.idProcesso)
                        variaveisDoProcesso.append(variavel)
                    inicio = time.time()
                    memoriaTemEspaco = self.memoriaPrimaria.algoritmoWorstFit(variaveisDoProcesso)
                    fim = time.time()
                    self.tempoAlocNos+= (fim - inicio)
                    self.numAlocNos+=1
                    if(not memoriaTemEspaco):
                        self.memoriaPrimaria.inserirSecundariaVect(variaveisDoProcesso)
                        #self.alocNegadas+=numDeVariveis
                        #self.memoriaSecundaria.inserirSecundariaVect(variaveisDoProcesso)
                        #self.processoSimulado.estado = 0 # Bloqueado
                        #self.estadoBloqueado.append(self.processoSimulado.idProcesso)
                        #self.estadoPronto.remove(self.processoSimulado.idProcesso)
                        '''
                            Processo √© bloqueado e entra pnumDeVariveisara a mem√≥ria secund√°ria com a flag de 
                            requisi√ß√£o de espa√ßo (flag pode ser abstra√≠da, j√° que se o processo foi 
                            bloqueado ele est√° aguardando a mem√≥ria prim√°ria).
                        '''

                # 2. Comando D: Declara uma vari√°vel inteira X, valor inicial igual a 0
                elif comando == 'D':
                    nomeVar = int(instrucaoDividida[1])
                    variavel = self.memoriaPrimaria.preencherVariavel(self.processoSimulado.idProcesso,nomeVar,0)
                    '''
                    self.processoSimulado.declaraVariavel(
                        indice = int(instrucaoDividida[1])
                    )
                    for v in variaveisDoProcesso:
                        if v.nome == None:
                            v.nome =
                    '''


                # 3. Comando V: Define o valor da vari√°vel inteira x
                elif comando == 'V':
                    nome = int(instrucaoDividida[1]) 
                    valor = int(instrucaoDividida[2])
                    variavel = self.memoriaPrimaria.mudarValor(self.processoSimulado.idProcesso,nome,valor)
                    '''
                    self.processoSimulado.defineValor(
                        indice = int(instrucaoDividida[1]), 
                        valor = int(instrucaoDividida[2])
                    )
                    '''

                # 4. Comando A: Adiciona n ao valor da vari√°vel inteira x
                elif comando == 'A':
                    indice = int(instrucaoDividida[1]) 
                    valor = int(instrucaoDividida[2])
                    variavel = self.memoriaPrimaria.buscaVariavelIndice(self.processoSimulado.idProcesso,indice)
                    self.CPU.somaValor(variavel,valor)
                    '''
                    self.CPU.somaValor()
                    self.processoSimulado.somaValor(
                        indice = int(instrucaoDividida[1]),
                        valor = int(instrucaoDividida[2])
                    )
                    '''

                # 5. Comando S: Subtrai n do valor da vari√°vel inteira x
                elif comando == 'S':
                    indice = int(instrucaoDividida[1]) 
                    valor = int(instrucaoDividida[2])
                    variavel = self.memoriaPrimaria.buscaVariavelIndice(self.processoSimulado.idProcesso,indice)
                    self.CPU.somaValor(variavel,-valor)
                    '''
                    self.processoSimulado.somaValor(
                        indice = int(instrucaoDividida[1]),
                        valor = -int(instrucaoDividida[2])
                    )
                    '''

                # 6. Comando B: Bloqueia esse processo simulado
                elif comando == 'B':
                    varPrimarias = self.memoriaPrimaria.removerProcesso(self.processoSimulado.idProcesso)
                    self.memoriaSecundaria.inserirSecundariaVect(varPrimarias)
                    self.processoSimulado.estado = 0 # Bloqueado
                    self.estadoBloqueado.append(self.processoSimulado.idProcesso)
                    self.estadoPronto.remove(self.processoSimulado.idProcesso)

                # 7. Comando T: Termina o processo simulado
                elif comando == 'T':
                    self.memoriaPrimaria.removerProcesso(self.processoSimulado.idProcesso)
                    self.estadoPronto.remove(self.processoSimulado.idProcesso)
                    self.tabelaProcesso.removerProcesso(self.processoSimulado)
                    self.processoSimulado = None

                # 8. Comando F: Cria um novo processo simulado filho
                elif comando == 'F':
                    self.criarProcessoSimulado(
                        eProcessoInicial = False,
                        contadorAtual = int(instrucaoDividida[1]),
                    )

                # 9.‚Äã Comando R: Substitui o programa do processo pelo programa no arquivo
                elif comando == 'R':
                    self.substituirImagemProcessoAtual(str(instrucaoDividida[1]), self.processoSimulado)

            print('\n\nMem√≥ria Prim√°ria')
            self.memoriaPrimaria.imprimeMemoria()

            print(' Mem√≥ria Secund√°ria')
            self.memoriaSecundaria.imprimeMemoria()

            self.tempoCPU += 1
            if comando != 'T':
                self.processoSimulado.tempoCPU += 1
                self.tabelaProcesso.atualizarProcesso(self.processoSimulado)

                if self.memoriaPrimaria.buscarVariavelDoProcesso == []:
                    # As instru√ß√µes do processo foram conclu√≠das, remover o processo
                    self.estadoPronto.remove(self.processoSimulado.idProcesso)
                    self.tabelaProcesso.removerProcesso(self.processoSimulado)
                    self.processoSimulado = None
                    self.passarSecundariaParaPrimaria()

                if self.CPU.passarQuantum() and self.memoriaPrimaria.buscarVariavelDoProcesso != []:
                    # Processo gastou o quantum dispon√≠vel
                    self.processoSimulado.incrementarPrioridade()
                    self.tabelaProcesso.atualizarProcesso(self.processoSimulado)
                    self.escalonadorDeProcessos()

                if comando == 'B':
                    self.tabelaProcesso.atualizarProcesso(self.processoSimulado)
                    self.escalonadorDeProcessos()
    
    def imprimeResultadosMemoria(self):
        print("üìù Percentual de vezes que uma Requisi√ß√£o √© Negada: %.2f" % float(100*(self.alocNegadas/self.alocFeitas)))
        print("üìù Tempo M√©dio de Aloca√ß√£o: "+str(self.tempoAlocNos/self.numAlocNos))
        print("üìù Numero de Fragmentos Externos na Memoria Primaria: "+str(self.memoriaPrimaria.numFrag))

    def passarSecundariaParaPrimaria(self):
        if len(self.memoriaSecundaria) != 0:
            variaveis = self.memoriaSecundaria.removerProcesso(self.memoriaSecundaria.primeiroProcessoSec())
            inicio = time.time()
            resultadoInsercao = self.memoriaPrimaria.algoritmoWorstFit(variaveis)
            fim = time.time()
            self.tempoAlocNos+= (fim - inicio)
            self.numAlocNos+=1

            if not resultadoInsercao:
                self.alocNegadas+= len(variaveis)
                self.memoriaSecundaria.inserirSecundariaVect(variaveis)
           